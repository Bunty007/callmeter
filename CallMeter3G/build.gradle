buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.+'
    }
}

apply plugin: 'com.android.application'

repositories {
    maven {
        url 'https://raw.githubusercontent.com/felixb/ub0rlogg0r/mvn-repo/'
    }
    maven {
        url 'https://raw.githubusercontent.com/Goddchen/mvn-repo/master/'
    }
    mavenCentral()
}

ext {
    gitVersion = null
}

def getVersionName = { ->
    if (project.gitVersion == null) {
        def version = "0.0.0"
        try {
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'describe', '--tags'
                standardOutput = stdout
            }
            version = stdout.toString().trim().replaceFirst('^[a-zA-Z][^-]*-', '')
        } catch (ignored) {
            return null
        }
        logger.info("version: ${version}")
        project.gitVersion = version
    } else {
      logger.debug("version already set: ${project.gitVersion}")
    }
    return project.gitVersion
}

def getVersionCode = { minSdk ->
    def version = getVersionName()
    def parts = version.split('[\\.]')
    def l = parts.size()
    def multi = 100000000
    def code = minSdk * multi

    for (int i = 0; i < l; i++) {
        multi /= 100
        code += parts[i].replaceFirst('-.*', '').toInteger() * multi
    }

    def versionCode = code.toInteger()
    logger.info("versionCode: ${versionCode}")
    return versionCode
}

android {
    compileSdkVersion 19
    buildToolsVersion '20'

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 19
        versionName getVersionName()
        versionCode getVersionCode(minSdkVersion.mApiLevel)
        buildConfigField 'boolean', 'DEBUG_LOG', 'true'
    }

    lintOptions {
        // checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }


    signingConfigs {
        if (project.hasProperty('releaseKeystorePassword')) {
            release {
                storeFile file("release.ks")
                storePassword releaseKeystorePassword
                keyAlias "jarsign"
                keyPassword releaseKeyPassword
            }
        }
    }

    buildTypes {
        debug {
            versionNameSuffix "-debug"
        }

        nologDebug {
            versionNameSuffix "-debug"
            signingConfig signingConfigs.debug
            proguardFile 'proguard.cfg'
            runProguard true
            buildConfigField 'boolean', 'DEBUG_LOG', 'false'
        }

        logRelease {
            versionNameSuffix "-logRelease"
            signingConfig signingConfigs.release
            runProguard false
        }

        release {
            signingConfig signingConfigs.release
            proguardFile 'proguard.cfg'
            runProguard true
            buildConfigField 'boolean', 'DEBUG_LOG', 'false'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.android.support:support-v4:20.+'
    compile 'com.actionbarsherlock:actionbarsherlock:+@aar'
    compile 'com.actionbarsherlock:viewpagerindicator:+'
    compile 'de.ub0r.android.logg0r:logg0r:+'
}
